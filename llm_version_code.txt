import streamlit as st

import os
import openai
import sys
from langchain.chat_models import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.chains import LLMChain
from langchain.chains import SequentialChain
import docx
from io import StringIO

sys.path.append('../..')

# from dotenv import load_dotenv, find_dotenv
# _ = load_dotenv(find_dotenv()) 
# openai.api_key  = os.environ['OPENAI_API_KEY']
openai.api_key  = st.secrets.OPENAI_API_KEY

# uploaded_file = st.file_uploader("Choose a file")

from langchain.document_loaders import Docx2txtLoader

path = '.'

files = [f for f in os.listdir(path) if os.path.isfile(f) and f.endswith('.docx')]

file_to_work = st.sidebar.selectbox('Choose the source file from the dropdown',
    files)
# st.write(file_to_work)

# loader = Docx2txtLoader("Demo Script.docx")
loader = Docx2txtLoader(f"{file_to_work}")
# loader = Docx2txtLoader(f"{uploaded_file.getvalue()}")
data = loader.load()
# data
# data = uploaded_file.getvalue()
# data = StringIO(uploaded_file.getvalue().decode("utf-8"))
# data = str(uploaded_file.read())
# product = data[0].page_content[590:600]
product = data
# st.write(product)

lang_to_translate = st.sidebar.text_input("enter your language of choice", value="English") #"spanish"
nationality = st.sidebar.text_input("enter your nationality of choice", value="Indian") #"indian"

def seq_chain(product,lang_to_translate,nationality):
    llm = ChatOpenAI(temperature=0)

    first_prompt = ChatPromptTemplate.from_template(
        "Translate the following {product} to  "
        f"\n\n{lang_to_translate}"
    )
   
    chain_one = LLMChain(llm=llm, prompt=first_prompt, 
                        output_key="translation"
                        )

    second_prompt = ChatPromptTemplate.from_template(
        "just replace the person names alone in {translation}"
        f"\n\n with names of {nationality} and do nothing else"
    )
    chain_two = LLMChain(llm=llm, prompt=second_prompt, output_key="output_text" )

    overall_chain = SequentialChain(
        chains=[chain_one, chain_two], 
        input_variables=["product"],
        output_variables=["translation","output_text"], 
        verbose=True
    )

    return overall_chain(product)
st.title('Emplay Assignment')
st.header(' to translate the given script to the user specified language and replace names with respect to the nationality')
st.write(":green[Translating]")
st.write(f":red[This is the input text]")
st.write(product)

response = seq_chain(product,lang_to_translate,nationality)
st.write(f":red[This is the {lang_to_translate} translated text]")
st.write(response['translation'])
st.write(f":red[This is the final output with the {nationality} names.]")
st.write(response['output_text'])

doc = docx.Document()
doc_para = doc.add_paragraph(f'{response}')
doc.save('Localised Demo Script.docx')
st.success(":green[Final output is saved as Localised Demo Script.docx]")

